[
  {
    "objectID": "01_Introduction.html",
    "href": "01_Introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "My name is Dionne (she/her; pronounciation: Dee-own) and I am a current PhD student in the Day Lab at the University of Melbourne.\n\n🇦🇺 From Melbourne, AU\n🎓 Education:\n\nBachelor of Science (major in Genetics),\nMaster of Science (BioSciences), and\nDoctor of Philosophy - Medicine, Dentistry and Health Sciences at The University of Melbourne.\n\n💻 Current President of R-Ladies Melbourne Inc.\n💬 Ask me about: 🧬 Population Genetics and 🔎 Molecular Epidemiology of Plasmodium falciparum malaria.\n📫 You can reach me on X, LinkedIn, GitHub or at my current email address: dargyropoulo@student.unimelb.edu.au.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "01_Introduction.html#quarto",
    "href": "01_Introduction.html#quarto",
    "title": "Introduction",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "01_Introduction.html#running-code",
    "href": "01_Introduction.html#running-code",
    "title": "Introduction",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "05_Conferences.html",
    "href": "05_Conferences.html",
    "title": "Conferences",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Conferences"
    ]
  },
  {
    "objectID": "05_Conferences.html#quarto",
    "href": "05_Conferences.html#quarto",
    "title": "Conferences",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Conferences"
    ]
  },
  {
    "objectID": "05_Conferences.html#running-code",
    "href": "05_Conferences.html#running-code",
    "title": "Conferences",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Research",
      "Conferences"
    ]
  },
  {
    "objectID": "04_PublishedPapers.html",
    "href": "04_PublishedPapers.html",
    "title": "Published Papers",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Published Papers"
    ]
  },
  {
    "objectID": "04_PublishedPapers.html#quarto",
    "href": "04_PublishedPapers.html#quarto",
    "title": "Published Papers",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Published Papers"
    ]
  },
  {
    "objectID": "04_PublishedPapers.html#running-code",
    "href": "04_PublishedPapers.html#running-code",
    "title": "Published Papers",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Research",
      "Published Papers"
    ]
  },
  {
    "objectID": "08_Work.html",
    "href": "08_Work.html",
    "title": "Teaching",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Teaching"
    ]
  },
  {
    "objectID": "08_Work.html#quarto",
    "href": "08_Work.html#quarto",
    "title": "Teaching",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Teaching"
    ]
  },
  {
    "objectID": "08_Work.html#running-code",
    "href": "08_Work.html#running-code",
    "title": "Teaching",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Teaching"
    ]
  },
  {
    "objectID": "03_ResearchInterests.html",
    "href": "03_ResearchInterests.html",
    "title": "Research Interests",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Research Interests"
    ]
  },
  {
    "objectID": "03_ResearchInterests.html#quarto",
    "href": "03_ResearchInterests.html#quarto",
    "title": "Research Interests",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Research",
      "Research Interests"
    ]
  },
  {
    "objectID": "03_ResearchInterests.html#running-code",
    "href": "03_ResearchInterests.html#running-code",
    "title": "Research Interests",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Research",
      "Research Interests"
    ]
  },
  {
    "objectID": "02_About.html",
    "href": "02_About.html",
    "title": "About Me",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "02_About.html#quarto",
    "href": "02_About.html#quarto",
    "title": "About Me",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "About Me"
    ]
  },
  {
    "objectID": "02_About.html#running-code",
    "href": "02_About.html#running-code",
    "title": "About Me",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "About Me"
    ]
  },
  {
    "objectID": "07_Awards.html",
    "href": "07_Awards.html",
    "title": "Awards",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Awards"
    ]
  },
  {
    "objectID": "07_Awards.html#quarto",
    "href": "07_Awards.html#quarto",
    "title": "Awards",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Awards"
    ]
  },
  {
    "objectID": "07_Awards.html#running-code",
    "href": "07_Awards.html#running-code",
    "title": "Awards",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Awards"
    ]
  },
  {
    "objectID": "06_Volunteering.html",
    "href": "06_Volunteering.html",
    "title": "Volunteering",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Volunteering"
    ]
  },
  {
    "objectID": "06_Volunteering.html#quarto",
    "href": "06_Volunteering.html#quarto",
    "title": "Volunteering",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Volunteering"
    ]
  },
  {
    "objectID": "06_Volunteering.html#running-code",
    "href": "06_Volunteering.html#running-code",
    "title": "Volunteering",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "Home",
      "Leadership, Community and Engagement",
      "Volunteering"
    ]
  },
  {
    "objectID": "01_Introduction.html#hi-im-dionne",
    "href": "01_Introduction.html#hi-im-dionne",
    "title": "Introduction",
    "section": "",
    "text": "My name is Dionne (she/her; pronounciation: Dee-own) and I am a current PhD student in the Day Lab at the University of Melbourne 🇦🇺🦘\n\n🇦🇺 From Melbourne, AU\n🎓 BSc (major in Genetics), MSc (BioSciences) and PhD at The University of Melbourne\n💻 Current President of R-Ladies Melbourne Inc\n💬 Ask me about: 🧬 Population Genetics and 🔎 Molecular Epidemiology of Plasmodium falciparum\n📫 You can reach me on X, LinkedIn or at my current email address: dargyropoulo@student.unimelb.edu.au",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "01_Introduction.html#hello",
    "href": "01_Introduction.html#hello",
    "title": "Introduction",
    "section": "",
    "text": "My name is Dionne (she/her; pronounciation: Dee-own) and I am a current PhD student in the Day Lab at the University of Melbourne.\n\n🇦🇺 From Melbourne, AU\n🎓 Education:\n\nBachelor of Science (major in Genetics),\nMaster of Science (BioSciences), and\nDoctor of Philosophy - Medicine, Dentistry and Health Sciences at The University of Melbourne.\n\n💻 Current President of R-Ladies Melbourne Inc.\n💬 Ask me about: 🧬 Population Genetics and 🔎 Molecular Epidemiology of Plasmodium falciparum malaria.\n📫 You can reach me on X, LinkedIn, GitHub or at my current email address: dargyropoulo@student.unimelb.edu.au.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "01_Introduction.html#about-me",
    "href": "01_Introduction.html#about-me",
    "title": "Introduction",
    "section": "About Me",
    "text": "About Me\nI have always had a keen interest in science. From adding vinegar to baking soda in kindergarten to make a volcano, to spending two months in Mallacoota, Victoria at school learning about the environment and renewable energy, I became fascinated with how the world works, how humans work and how life works. While I enjoyed chemistry at school and university, my interest in biology - specifically evolution and genetics - ultimately led me to major in genetics in my Bachelor of Science degree at the University of Melbourne (2015-2017). More about my research journey is discussed here.\nI have recently submitted my PhD thesis and am now in the final phase of my doctoral research on the molecular epidemiology and population genetics of Plasmodium falciparum malaria in high-transmission settings with the Day Lab at the University of Melbourne. I completed a Bachelor of Science with a major in Genetics at the University of Melbourne. I then joined the Day Lab in February 2018 to start my Master of Science (BioSciences). I investigated the effects of perturbations on the population genetics of the reservoir of Plasmodium falciparum malaria in Bongo District, Ghana. My PhD project extended this by considering various population genetics metrics on perturbations.\nThroughout my research projects, I developed a deep interest in coding and have generated this website using R/Quarto! I have been an active member of R-Ladies Melbourne Inc. since 2023, serving as a committee member, Vice President and am now currently the President of the group. Coding in R always comes with challenges but the satisfaction when completing a task, in my opinion, is unparalleled. I have been continuing to seek new ways to up-skill in my coding, whether that’s developing a bookdown workshop, keeping up to date with functions in the tidyverse, creating new maps using packages such as MalariaAtlas and ggmap, or learning all the amazing ways quarto can be used to elevate documents, websites etc.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html",
    "href": "Code_Book/01_Code_Log_Intro.html",
    "title": "Welcome",
    "section": "",
    "text": "This collection was inspired by Chrissy Roberts’ Code Book, which I was introduced to by Caitlin Bourke. It brings together the most useful pieces of code I’ve accumulated over the years—scripts I often return to or have developed for specific analyses. My hope is that future me (and anyone else who happens to come across this) finds it a helpful and practical resource.\nHere are a list of my favourite R packages that will be leveraged throughout this section.",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#data-wrangling",
    "href": "Code_Book/01_Code_Log_Intro.html#data-wrangling",
    "title": "Welcome",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nlibrary(tidyverse)",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#epidemiology-statistical-analysis",
    "href": "Code_Book/01_Code_Log_Intro.html#epidemiology-statistical-analysis",
    "title": "Welcome",
    "section": "Epidemiology / Statistical Analysis",
    "text": "Epidemiology / Statistical Analysis\n\nlibrary(tidyverse)\nlibrary(gtsummary)",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#population-genetics-analysis",
    "href": "Code_Book/01_Code_Log_Intro.html#population-genetics-analysis",
    "title": "Welcome",
    "section": "Population Genetics Analysis",
    "text": "Population Genetics Analysis\n\nlibrary(poppr)\nlibrary(adegenet)",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#r-shiny",
    "href": "Code_Book/01_Code_Log_Intro.html#r-shiny",
    "title": "Welcome",
    "section": "R Shiny",
    "text": "R Shiny\n\nlibrary(shiny)\nlibrary(shiny.fluent)\nlibrary(waiter)",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#r-package-development",
    "href": "Code_Book/01_Code_Log_Intro.html#r-package-development",
    "title": "Welcome",
    "section": "R Package Development",
    "text": "R Package Development\n\nlibrary(devtools)\nlibrary(usethis)",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html",
    "href": "Code_Book/02_R_Package.html",
    "title": "R Package Development",
    "section": "",
    "text": "First, open a new project in R and select: File &gt; New Project &gt; New Directory &gt; R Package.\nHere you will enter your R package name e.g.,{my_package} as shown in the image to the right.\n\n\n\n\n\n\nTip\n\n\n\nR-emember: A catchy name sticks! Make it short, smart, and a clever play on “R” can make your package name memorable!\n\n\n\n\n\n\n\n\n\nStart up your .R file and enter your function: R/processCounts.R\n\nprocessCounts &lt;- function(antigen_output){\n\n  # 1. Store Counts Data\n  counts_data &lt;- antigen_output$counts\n\n  # 2. Data Wrangling\n  counts_data &lt;- counts_data %&gt;%\n    dplyr::mutate(Location=gsub(\".*,\", \"\", Location)) %&gt;%\n    dplyr::mutate(Location=substr(Location, 1, nchar(Location)-1))  %&gt;%\n    tidyr::pivot_longer(-c(Sample, Location, Plate), names_to = \"Antigen\", values_to = \"Count\") %&gt;%\n    dplyr::mutate(Warning = dplyr::case_when(\n      as.numeric(Count)&lt;15~1,\n      as.numeric(Count)&gt;=15~0\n    ))\n\n  return(counts_data)\n}\n\nThen click inside the function and either use the shortcut command (Mac): Shift + Option + Command + R OR you can go into Code &gt; Insert Roxygen Skeleton.\nThis will load something that looks like this:\n\n#' Process Counts from Raw Serological Data file\n#'\n#' A helper function to process counts data.\n#'\n#' @param antigen_output Output from `readAntigens()` (reactive).\n#' @return Returns a long table of counts with \"Warning\" category (&lt;15 == 1 and ≥ 15 == 0) for downstream wrangling.\n#' @export\n#' \n#' @author Dionne Argyropoulos\n\nThere are many other possibilities to add! See more in the documentation.\n\n\n\nOnce you have built one or multiple .R files, they need to be added to the manual! Here, you run the following line in your console!\n\n# devtools::document()                          # updates NAMESPACE\n\nIt is useful to run this command every time you write or update an .R file. This will create and update .Rd files for the manual. It will also update the NAMESPACE file.\n\n\n\nYou will also need to add “imports” for each package in the roxygen file. This includes all of the packages and/or functions that are used. To save memory, it is best practice to load only the functions that you require in each function.\nFor example, in the processCounts() function, the dplyr::mutate(), dplyr::case_when() and tidyr::pivot_longer() functions are used. We can write them in the roxygen documentation by adding the @importFrom {package} {argument} function, where multiple arguments can be added by just listing them side-by-side (as shown for dplyr below).\n\n#' Process Counts from Raw Serological Data file\n#'\n#' A helper function to process counts data.\n#'\n#' @param antigen_output Output from `readAntigens()` (reactive).\n#' @return Returns a long table of counts with \"Warning\" category (&lt;15 == 1 and ≥ 15 == 0) for downstream wrangling.\n#' @export\n#' \n#' @importFrom dplyr mutate case_when\n#' @importFrom tidyr pivot_longer\n#' \n#' @author Dionne Argyropoulos\nprocessCounts &lt;- function(antigen_output){\n\n  # 1. Store Counts Data\n  counts_data &lt;- antigen_output$counts\n\n  # 2. Data Wrangling\n  counts_data &lt;- counts_data %&gt;%\n    dplyr::mutate(Location=gsub(\".*,\", \"\", Location)) %&gt;%\n    dplyr::mutate(Location=substr(Location, 1, nchar(Location)-1))  %&gt;%\n    tidyr::pivot_longer(-c(Sample, Location, Plate), names_to = \"Antigen\", values_to = \"Count\") %&gt;%\n    dplyr::mutate(Warning = dplyr::case_when(\n      as.numeric(Count)&lt;15~1,\n      as.numeric(Count)&gt;=15~0\n    ))\n\n  return(counts_data)\n}\n\nIf you used more functions from a package, for example in the plotCounts() function below where ggplot2:: is called often for many different functions, then we just load the ggplot2 package by @import {package}.\n\n#' Plot Bead Count Data\n#'\n#' This function gets the count data and plots the plate image, creating a new\n#' facet (i.e., panel) for each antigen and each line represents the\n#' different plates so that they can be visualised.\n#'\n#' @param counts_output Output from `getCounts()` (reactive).\n#' @param experiment_name User-input experiment name (reactive).\n#' @return Tile Plot showing binary result of \"sufficient beads\" with cut-off\n#' &gt;15 beads and \"repeat\" ≤15 beads (ggplot).\n#' @export\n#' @import ggplot2\n#' @author Shazia Ruybal-Pesántez, Dionne Argyropoulos\nplotCounts &lt;- function(counts_output, experiment_name){\n  bead_counts &lt;- counts_output\n  bead_counts$Plate &lt;- factor(bead_counts$Plate, levels = unique(bead_counts$Plate[order(as.numeric(str_extract(bead_counts$Plate, \"\\\\d+\")))])) # reorder by plate number\n  bead_counts %&gt;%\n    ggplot2::ggplot(mapping = aes(x = Col, y = fct_rev(Row), fill = Repeat), fill = summary) +\n    ggplot2::geom_tile(aes(height = 0.90, width = 0.90)) +\n    ggplot2::scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), position = \"top\") +\n    ggplot2::scale_fill_manual(values = c(\"sufficient beads\" = \"#91bfdb\", \"repeat\" = \"#d73027\"), drop=FALSE) +\n    ggplot2::theme_bw() +\n    ggplot2::labs(x = \"\", y = \"\", title = experiment_name , fill = \"\") +\n    ggplot2::facet_wrap( ~ Plate, ncol = 3, scales = \"free_y\")  # This will create separate facets for each level of 'Plate'\n}\n\n\n\n\nLastly, we need to update the default empty DESCRIPTION file which looks like below:\n\n# Package: mypackage\n# Title: What the Package Does (One Line, Title Case)\n# Version: 0.0.0.9000\n# Authors@R: \n#     person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"))\n# Description: What the package does (one paragraph).\n# License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#     license\n# Encoding: UTF-8\n# Roxygen: list(markdown = TRUE)\n# RoxygenNote: 7.3.2\n\nWhich you can update as intended for your purposes. In order to add any package dependencies as discussed above, then to add packages to the dependencies, you must use:\n\n# usethis::use_package(\"dplyr\")                # adds to Imports in DESCRIPTIPN\n# usethis::use_package(\"ggplot2\", \"Suggests\")  # adds to Suggests in DESCRIPTION\n\n\n\n\nTHEN you can check that all your functions and packages are loaded properly to build your package:\n\n# devtools::check()\n\nIt will tell you if your package:\n\nUses functions from a package not listed in DESCRIPTION\nLists packages you don’t actually use\n\n\n\n\n\nCreate .R file\nAdd your function to the .R file\nAdd roxygen comments in .R file, including @import or @importFrom for package dependencies\nRun devtools::document() to update NAMESPACE\nUse usethis::use_package(\"package\") to add to DESCRIPTION\nRun devtools::check() to verify consistency\n\nFor more detail about the R package development process, see the manual.\n\n\n\nTo add the Creative Commons Attribution licence (CC BY) in an R package’s DESCRIPTION:\n\n# usethis::use_ccby_license(\"Your Name\")\n\n\n\n\nTo create a package-level documentation file in R, you create a special .R file (commonly my_package-package.R) that includes a @docType package and a NULL at the end.\nThis file generates the help page users see when they run ?my_package and is the right place to include global @importFrom directives like for %&gt;%.\nFirst create R/my_package-package.R and add the following roxygen block, for example:\n\n#' pvsero: Tools for serology test-and-treat\n#'\n#' This package provides tools to process, model, and visualise serological data\n#' as part of the PvSeroTaT study.\n#'\n#' @docType package\n#' @name pvsero\n#' @importFrom magrittr %&gt;%\n#' @importFrom dplyr select filter mutate\n#' @importFrom ggplot2 ggplot aes geom_point\nNULL\n\nReplace the title and description with your own.\n\n@docType package tells roxygen this is the main package doc\n@name pvsero links the doc to the package name\n@importFrom … adds functions to NAMESPACE\nNULL at the end is required — the doc has no function attached\n\nThen rebuild the documentation: devtools::document() to update the NAMESPACE and creates \"man/my_package.Rd\", which is the file for ?my_package\nIf specific packages and/or functions are not added.\nYou can handle variable column names that are defined in R in a file called R/globals.R\n\n# e.g.: \n# utils::globalVariables(c(\n#   \".\", \"Sample\", \"SampleID\", \"RAU\", \"MFI\", \"Plate\", \"Program\",\n#   \"Agg\", \"Antigen\", \"Beads\", \"Count\", \"Type\", \"QC_total\", \"Repeat\",\n#   \"Gate\", \"LL.5\", \"Well\", \"Location\", \"Location.2\", \"Region\", \n#   \"pred_class_max\", \".pred_new\", \"seropositive\", \"seronegative\",\n#   \"stdcurve\", \"Sampling Errors\", \"Sens_Spec\", \"Text\", \"Total\", \n#   \"Warning\", \"status_code\", \"type.letter\", \"dilution\", \"div\", \"value\",\n#   \"xPONENT\", \"mfi\", \"mfi_pred\", \"new_fit\", \"eth_fit\", \"ref_mfi\", \n#   \"error\", \"suffix\", \"prefix\", \"drm\", \"coef\", \"file_name\", \"data\", \n#   \"tibble\", \"data_type\", \"pull\", \"fct_rev\", \"glue\", \"where\",\n#   \"fromJSON\", \"png_fit\", \"row_number\", \"everything\", \"n\"\n# ))\n\nThen re-check and iterate\n\n# devtools::document()\n# devtools::check()\n\nIf you want to upload global R packages that apply to multiple functions:\n\n#' pvsero: Tools for [Your Package Description Here]\n#'\n#' [Optional longer description of what your package does]\n#'\n#' @docType package\n#' @name pvsero\n#' @importFrom magrittr %&gt;%\nNULL\n\nThis: - Documents the package as a whole (@docType package) - Imports %&gt;% once globally - Keeps your NAMESPACE tidy Then run: devtools::document()",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#how-do-we-create-an-r-package",
    "href": "Code_Book/02_R_Package.html#how-do-we-create-an-r-package",
    "title": "R Package Development",
    "section": "",
    "text": "First, open a new project in R and select\nFile &gt; New Project &gt; New Directory &gt; R Package\nHere you will enter your R package name e.g.,{SeroTrackR}\nEvery time you write something, you must run\n\n# devtools::document()\n\nso that the …\n\n# devtools::load_all()\n\nallows for …",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#creating-an-r-package",
    "href": "Code_Book/02_R_Package.html#creating-an-r-package",
    "title": "R Package Development",
    "section": "",
    "text": "First, open a new project in R and select: File &gt; New Project &gt; New Directory &gt; R Package.\nHere you will enter your R package name e.g.,{my_package} as shown in the image to the right.\n\n\n\n\n\n\nTip\n\n\n\nR-emember: A catchy name sticks! Make it short, smart, and a clever play on “R” can make your package name memorable!\n\n\n\n\n\n\n\n\n\nStart up your .R file and enter your function: R/processCounts.R\n\nprocessCounts &lt;- function(antigen_output){\n\n  # 1. Store Counts Data\n  counts_data &lt;- antigen_output$counts\n\n  # 2. Data Wrangling\n  counts_data &lt;- counts_data %&gt;%\n    dplyr::mutate(Location=gsub(\".*,\", \"\", Location)) %&gt;%\n    dplyr::mutate(Location=substr(Location, 1, nchar(Location)-1))  %&gt;%\n    tidyr::pivot_longer(-c(Sample, Location, Plate), names_to = \"Antigen\", values_to = \"Count\") %&gt;%\n    dplyr::mutate(Warning = dplyr::case_when(\n      as.numeric(Count)&lt;15~1,\n      as.numeric(Count)&gt;=15~0\n    ))\n\n  return(counts_data)\n}\n\nThen click inside the function and either use the shortcut command (Mac): Shift + Option + Command + R OR you can go into Code &gt; Insert Roxygen Skeleton.\nThis will load something that looks like this:\n\n#' Process Counts from Raw Serological Data file\n#'\n#' A helper function to process counts data.\n#'\n#' @param antigen_output Output from `readAntigens()` (reactive).\n#' @return Returns a long table of counts with \"Warning\" category (&lt;15 == 1 and ≥ 15 == 0) for downstream wrangling.\n#' @export\n#' \n#' @author Dionne Argyropoulos\n\nThere are many other possibilities to add! See more in the documentation.\n\n\n\nOnce you have built one or multiple .R files, they need to be added to the manual! Here, you run the following line in your console!\n\n# devtools::document()                          # updates NAMESPACE\n\nIt is useful to run this command every time you write or update an .R file. This will create and update .Rd files for the manual. It will also update the NAMESPACE file.\n\n\n\nYou will also need to add “imports” for each package in the roxygen file. This includes all of the packages and/or functions that are used. To save memory, it is best practice to load only the functions that you require in each function.\nFor example, in the processCounts() function, the dplyr::mutate(), dplyr::case_when() and tidyr::pivot_longer() functions are used. We can write them in the roxygen documentation by adding the @importFrom {package} {argument} function, where multiple arguments can be added by just listing them side-by-side (as shown for dplyr below).\n\n#' Process Counts from Raw Serological Data file\n#'\n#' A helper function to process counts data.\n#'\n#' @param antigen_output Output from `readAntigens()` (reactive).\n#' @return Returns a long table of counts with \"Warning\" category (&lt;15 == 1 and ≥ 15 == 0) for downstream wrangling.\n#' @export\n#' \n#' @importFrom dplyr mutate case_when\n#' @importFrom tidyr pivot_longer\n#' \n#' @author Dionne Argyropoulos\nprocessCounts &lt;- function(antigen_output){\n\n  # 1. Store Counts Data\n  counts_data &lt;- antigen_output$counts\n\n  # 2. Data Wrangling\n  counts_data &lt;- counts_data %&gt;%\n    dplyr::mutate(Location=gsub(\".*,\", \"\", Location)) %&gt;%\n    dplyr::mutate(Location=substr(Location, 1, nchar(Location)-1))  %&gt;%\n    tidyr::pivot_longer(-c(Sample, Location, Plate), names_to = \"Antigen\", values_to = \"Count\") %&gt;%\n    dplyr::mutate(Warning = dplyr::case_when(\n      as.numeric(Count)&lt;15~1,\n      as.numeric(Count)&gt;=15~0\n    ))\n\n  return(counts_data)\n}\n\nIf you used more functions from a package, for example in the plotCounts() function below where ggplot2:: is called often for many different functions, then we just load the ggplot2 package by @import {package}.\n\n#' Plot Bead Count Data\n#'\n#' This function gets the count data and plots the plate image, creating a new\n#' facet (i.e., panel) for each antigen and each line represents the\n#' different plates so that they can be visualised.\n#'\n#' @param counts_output Output from `getCounts()` (reactive).\n#' @param experiment_name User-input experiment name (reactive).\n#' @return Tile Plot showing binary result of \"sufficient beads\" with cut-off\n#' &gt;15 beads and \"repeat\" ≤15 beads (ggplot).\n#' @export\n#' @import ggplot2\n#' @author Shazia Ruybal-Pesántez, Dionne Argyropoulos\nplotCounts &lt;- function(counts_output, experiment_name){\n  bead_counts &lt;- counts_output\n  bead_counts$Plate &lt;- factor(bead_counts$Plate, levels = unique(bead_counts$Plate[order(as.numeric(str_extract(bead_counts$Plate, \"\\\\d+\")))])) # reorder by plate number\n  bead_counts %&gt;%\n    ggplot2::ggplot(mapping = aes(x = Col, y = fct_rev(Row), fill = Repeat), fill = summary) +\n    ggplot2::geom_tile(aes(height = 0.90, width = 0.90)) +\n    ggplot2::scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), position = \"top\") +\n    ggplot2::scale_fill_manual(values = c(\"sufficient beads\" = \"#91bfdb\", \"repeat\" = \"#d73027\"), drop=FALSE) +\n    ggplot2::theme_bw() +\n    ggplot2::labs(x = \"\", y = \"\", title = experiment_name , fill = \"\") +\n    ggplot2::facet_wrap( ~ Plate, ncol = 3, scales = \"free_y\")  # This will create separate facets for each level of 'Plate'\n}\n\n\n\n\nLastly, we need to update the default empty DESCRIPTION file which looks like below:\n\n# Package: mypackage\n# Title: What the Package Does (One Line, Title Case)\n# Version: 0.0.0.9000\n# Authors@R: \n#     person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"))\n# Description: What the package does (one paragraph).\n# License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n#     license\n# Encoding: UTF-8\n# Roxygen: list(markdown = TRUE)\n# RoxygenNote: 7.3.2\n\nWhich you can update as intended for your purposes. In order to add any package dependencies as discussed above, then to add packages to the dependencies, you must use:\n\n# usethis::use_package(\"dplyr\")                # adds to Imports in DESCRIPTIPN\n# usethis::use_package(\"ggplot2\", \"Suggests\")  # adds to Suggests in DESCRIPTION\n\n\n\n\nTHEN you can check that all your functions and packages are loaded properly to build your package:\n\n# devtools::check()\n\nIt will tell you if your package:\n\nUses functions from a package not listed in DESCRIPTION\nLists packages you don’t actually use\n\n\n\n\n\nCreate .R file\nAdd your function to the .R file\nAdd roxygen comments in .R file, including @import or @importFrom for package dependencies\nRun devtools::document() to update NAMESPACE\nUse usethis::use_package(\"package\") to add to DESCRIPTION\nRun devtools::check() to verify consistency\n\nFor more detail about the R package development process, see the manual.\n\n\n\nTo add the Creative Commons Attribution licence (CC BY) in an R package’s DESCRIPTION:\n\n# usethis::use_ccby_license(\"Your Name\")\n\n\n\n\nTo create a package-level documentation file in R, you create a special .R file (commonly my_package-package.R) that includes a @docType package and a NULL at the end.\nThis file generates the help page users see when they run ?my_package and is the right place to include global @importFrom directives like for %&gt;%.\nFirst create R/my_package-package.R and add the following roxygen block, for example:\n\n#' pvsero: Tools for serology test-and-treat\n#'\n#' This package provides tools to process, model, and visualise serological data\n#' as part of the PvSeroTaT study.\n#'\n#' @docType package\n#' @name pvsero\n#' @importFrom magrittr %&gt;%\n#' @importFrom dplyr select filter mutate\n#' @importFrom ggplot2 ggplot aes geom_point\nNULL\n\nReplace the title and description with your own.\n\n@docType package tells roxygen this is the main package doc\n@name pvsero links the doc to the package name\n@importFrom … adds functions to NAMESPACE\nNULL at the end is required — the doc has no function attached\n\nThen rebuild the documentation: devtools::document() to update the NAMESPACE and creates \"man/my_package.Rd\", which is the file for ?my_package\nIf specific packages and/or functions are not added.\nYou can handle variable column names that are defined in R in a file called R/globals.R\n\n# e.g.: \n# utils::globalVariables(c(\n#   \".\", \"Sample\", \"SampleID\", \"RAU\", \"MFI\", \"Plate\", \"Program\",\n#   \"Agg\", \"Antigen\", \"Beads\", \"Count\", \"Type\", \"QC_total\", \"Repeat\",\n#   \"Gate\", \"LL.5\", \"Well\", \"Location\", \"Location.2\", \"Region\", \n#   \"pred_class_max\", \".pred_new\", \"seropositive\", \"seronegative\",\n#   \"stdcurve\", \"Sampling Errors\", \"Sens_Spec\", \"Text\", \"Total\", \n#   \"Warning\", \"status_code\", \"type.letter\", \"dilution\", \"div\", \"value\",\n#   \"xPONENT\", \"mfi\", \"mfi_pred\", \"new_fit\", \"eth_fit\", \"ref_mfi\", \n#   \"error\", \"suffix\", \"prefix\", \"drm\", \"coef\", \"file_name\", \"data\", \n#   \"tibble\", \"data_type\", \"pull\", \"fct_rev\", \"glue\", \"where\",\n#   \"fromJSON\", \"png_fit\", \"row_number\", \"everything\", \"n\"\n# ))\n\nThen re-check and iterate\n\n# devtools::document()\n# devtools::check()\n\nIf you want to upload global R packages that apply to multiple functions:\n\n#' pvsero: Tools for [Your Package Description Here]\n#'\n#' [Optional longer description of what your package does]\n#'\n#' @docType package\n#' @name pvsero\n#' @importFrom magrittr %&gt;%\nNULL\n\nThis: - Documents the package as a whole (@docType package) - Imports %&gt;% once globally - Keeps your NAMESPACE tidy Then run: devtools::document()",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#creating-a-vignette",
    "href": "Code_Book/02_R_Package.html#creating-a-vignette",
    "title": "R Package Development",
    "section": "Creating a Vignette",
    "text": "Creating a Vignette\nRun the following command once, to:\n\nCreates a vignettes/ directory (if it doesn’t exist)\nCreates an .Rmd file at e.g., vignettes/getting-started.Rmd\nAdds knitr and rmarkdown to Suggests: in DESCRIPTION\nConfigures DESCRIPTION to build vignettes\n\n\n# usethis::use_vignette(\"getting-started\")\n\nThis will be added to the DESCRIPTION: VignetteBuilder: knitr\n\nAdd content to the vignette\nSimply open the .Rmd file and edit as per a normal R Markdown.\n\n# ---\n# title: \"Getting Started with my_package\"\n# output: rmarkdown::html_vignette\n# vignette: &gt;\n#   %\\VignetteIndexEntry{Getting Started with my_package}\n#   %\\VignetteEngine{knitr::rmarkdown}\n#   %\\VignetteEncoding{UTF-8}\n# ---\n# \n# ```{r setup, include = FALSE}\n# knitr::opts_chunk$set(\n#   collapse = TRUE,\n#   comment = \"#&gt;\"\n# )\n# library(my_package)\n\n\n\nUpload the vignette\nOnce you are ready for the vignette to be updated to the manual, run the following command:\n\n# devtools::build_vignettes()\n\nThis will:\n\nKnit the .Rmd file into .html and .R files\nPlace them into inst/doc/ so they’re included when your package is installed\n\nNow you can view the vignette by:\n\n# browseVignettes(\"my_package\") # OR \n# vignette(\"my_package\") \n\n\n\n\n\n\n\nTip\n\n\n\nUse devtools::check() to confirm your vignette builds cleanly.\nKeep vignettes short, succinct and low data space.",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#exporting-the-package",
    "href": "Code_Book/02_R_Package.html#exporting-the-package",
    "title": "R Package Development",
    "section": "Exporting the Package",
    "text": "Exporting the Package\n\nOption 1: Local Only: Build a .tar.gz file distributable package file\n\n# Step 1: \n# devtools::build() # this creates a `my_package_0.1.0.tar.gz` file\n\n# Step 2: \n# install.packages(\"my_package_0.1.0.tar.gz\", repos = NULL, type = \"source\")\n\nThe my_package_0.1.0.tar.gz file file be shared to others and they can load the package by: devtools::install(\"/path/to/my_package\")\n\n\nOption 2: Local or Global: Export to GitHub\nTo make this work:\n\nPush your package directory to a GitHub repo\nEnsure the structure is valid (DESCRIPTION, NAMESPACE, R/, etc.)\n\nThis can be done in the R console, as shown below, or in the terminal.\n\n# usethis::use_git()       # if your package isn't using Git yet\n# usethis::use_github()    # this pushes it to GitHub\n\nAfter uploading:\n\n# devtools::install_github(\"yourusername/my_package\") # OR \n# remotes::install_github(\"yourusername/my_package\")\n\n\nCreating Personal Access Token\nif you haven’t created a personal access token for GitHub to interact with your R studio:\n\n# usethis::create_github_token()\n\nThis will:\n\nOpen GitHub in your browser to the personal access token creation page\nSuggest the correct scopes (you can usually just accept the defaults: repo, user, etc.)\n\n\n\n\n\n\n\nImportant\n\n\n\nCopy the token when it’s generated — this is your only chance to see it!\n\n\nThen, in R:\n\n# gitcreds::gitcreds_set()\n\nAnd paste the token when it is prompted. This securely stores your token so Git can authenticate with GitHub from R (using HTTPS).\nThen verify you’re signed in:\n\n# gh::gh_whoami()\n\nSet your git name and email:\n\n# usethis::use_git_config(user.name = \"Your Name\", user.email = \"your@email.com\")\n\n\n\n\nFolder Organisation\nThe overall package folder looks like this:\n\n# my_package/\n# ├── DESCRIPTION\n# ├── NAMESPACE\n# ├── R/\n# │   ├── function1.R\n# │   └── helper.R\n# ├── man/\n# │   ├── function1.Rd\n# ├── vignettes/           # optional\n# ├── tests/               # optional\n# ├── inst/                # optional (e.g. extdata, shiny apps)\n# ├── data/                # optional\n# ├── LICENSE              # optional (recommended)\n# ├── README.md            # optional but nice",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#troubleshooting-faqs",
    "href": "Code_Book/02_R_Package.html#troubleshooting-faqs",
    "title": "R Package Development",
    "section": "Troubleshooting FAQs",
    "text": "Troubleshooting FAQs\n\nWarning: Package or Functions not defined\nTo account for many “notes” from the devtools::check(), you can:\nAdd @importFrom {package} {function} {function} {function} to those that have not been added. Add @import {package} to those that have not been added.\n\n\nWarning: Meta/ file corrupted or errors\n\n# Common error: Warning message:\n# In loadNamespace(package, lib.loc = libLoc) :\n#   package ‘my_package’ has no 'package.rds' in Meta/\n\n\nRestart R\nClean the build cache: devtools::clean_dll()\nRemove previously installed/broken version: remove.packages(\"my_package\")\nCheck where it’s installed: find.package(\"my_package\"): if it is still installed then delete it manually from the folder\nReinstall the package cleanly: devtools::install(clean = TRUE):\n\n\nThis will clean previous build artifacts\nRebuild the package from source\nRegenerate the Meta/ and pacakge.rd correctly\n\n\nRun devtools::load_all() and the warning should disappear",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/01_Code_Log_Intro.html#general-git-things",
    "href": "Code_Book/01_Code_Log_Intro.html#general-git-things",
    "title": "Welcome",
    "section": "General Git things",
    "text": "General Git things\n\nMaking changes\n\n# git add .\n# git commit -m \"Add a personalised and detailed message\"\n# git push\n\n\n\nClone a repository from GitHub\n\n\nPush a repository to GitHub\n\n\nHow to remove a repository on Github\n\nGo to the repository’s main page on GitHub (e.g., https://github.com/yourusername/pvsero)\nClick Settings (right-hand tab)\nScroll all the way to the Danger Zone at the bottom\nClick Delete this repository\nGitHub will ask you to:\n\nConfirm the name of the repo (e.g., yourusername/pvsero)\nType it in to confirm\n\nClick the red I understand the consequences, delete this repository button\n\nThe repository will be permanently deleted — this action cannot be undone.\nThis does not delete your local R project or files — only the copy on GitHub. If you want to disconnect GitHub but keep the local Git repo, you can just remove the remote link using: git remote remove origin",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "Welcome"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#adding-files-to-the-package",
    "href": "Code_Book/02_R_Package.html#adding-files-to-the-package",
    "title": "R Package Development",
    "section": "Adding files to the package",
    "text": "Adding files to the package\nCreate inst/extdata folder path and add all of the files to add.\nThen you can run the files here:\n\n# magpix_file &lt;- system.file(\"extdata\", \"example_MAGPIX_plate1.csv\", package = \"pvsero\")\n# file &lt;- read.csv(magpix_file)\n\nThis also works for .rda, .csv, .xlsx or other files.\nYou can also add a template.Rmd file to create PDFs or HTML outputs from rmarkdown files:\n\n# template &lt;- system.file(\"rmd\", \"template.Rmd\", package = \"pvsero\")\n\n### OR FOR EXAMPLE IN THE `pvsero::renderQCReport()`: \n  #   rmarkdown::render(\n  #     input = system.file(\"rmd/template.Rmd\", package=\"pvsero\"),\n  #     output_file = paste0(experiment_name, \"_\", date, \"_\", location, \"_\", version, \"_QCreport.pdf\"),\n  #     output_dir = here::here(),\n  #     params = list(\n  #       raw_data_filename = raw_data_filename,\n  #       experiment_name = experiment_name,\n  #       date = date,\n  #       experiment_notes = experiment_notes,\n  #       platform = platform,\n  #       stdcurve_plot = stdcurve_plot,\n  #       plateqc_plot = plateqc_plot,\n  #       blanks_plot = blanks_plot,\n  #       check_repeats_output = check_repeats_output,\n  #       check_repats_table_pdf = check_repats_table_pdf(check_repeats_output),\n  #       model_plot = model_plot,\n  #       operator_output = operator_output(),\n  #       volume_output = volume_output(),\n  #       calibration_output = calibration_output(),\n  #       machine_output = machine_output(),\n  #       plate_list_output = plate_list_output()\n  #     )\n  #   )\n\n\nAdd documentation to a dataset\nTo create .Rd documentation files for datasets included in your R package, you document them with roxygen2-style comments above the dataset definition or in a dedicated .R file. These get converted into .Rd files when you run devtools::document().\n\n\n1. Decide where to store the dataset\nYou have two options:\n\n\n\nType\nLocation\nFormat\nAccess\n\n\n\n\nLazy-loaded\ndata/\n.rda\ndata_name\n\n\nFile-based\ninst/extdata/\n.csv/.txt\nsystem.file()\n\n\n\nLet’s assume you’re using the data/ folder and loading the data with data() or library(my_package).\n\n\n2. Save the dataset\nIn your package root:\n\n# usethis::use_data(my_data, overwrite = TRUE)\n\nThis creates data/my_data.rda.\n\n\n3. Create documentation in R/ folder\nCreate a new R script, e.g. R/data-documentation.R, and add:\n\n#' Example Serological Dataset\n#'\n#' A dataset containing raw RAU values and metadata from a test plate run.\n#'\n#' @format A data frame with 96 rows and 8 variables:\n#' \\describe{\n#'   \\item{SampleID}{Unique identifier for the sample}\n#'   \\item{Antigen}{Antigen name}\n#'   \\item{RAU}{Relative antibody units}\n#'   \\item{Plate}{Plate ID}\n#'   \\item{Repeat}{Repeat measurement flag}\n#'   \\item{Status}{Classification of sample}\n#'   \\item{Region}{Geographic region}\n#'   \\item{Program}{Treatment program}\n#' }\n#'\n#' @source Mueller Lab, WEHI\n\"my_data\"\n\nThe final line “my_data” tells roxygen you’re documenting the object named my_data.\n\n\n4. Run devtools::document()\n\n# devtools::document()\n\nThis creates man/my_data.Rd, which users can now view via:\n\n# ?my_data\n\n\n\n\n\n\n\nTip\n\n\n\nTip: Document each dataset in a separate roxygen block. Also, if you’re using CSV files in inst/extdata/, you don’t need .Rd docs unless you’re loading them as data objects inside the package.\n\n\n\n\nExample for multiple datasets:\n\n#' Plate Metadata\n#'\n#' Metadata for the test plate used in example analysis.\n#'\n#' @format A data frame with 96 rows and 5 columns.\n#' @source Internal study data\n\"plate_meta\"\n\n#' Serological Measurements\n#'\n#' Processed MFI and RAU values used in the example vignette.\n#'\n#' @format A tibble with 96 observations of 3 variables.\n#' @source Simulated data\n\"sero_data\"",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/02_R_Package.html#updating-the-package",
    "href": "Code_Book/02_R_Package.html#updating-the-package",
    "title": "R Package Development",
    "section": "Updating the Package",
    "text": "Updating the Package\n\n1. Make the Update\n\nAdd new functions, modify existing ones or remove functions sin the R/ folder.\nAdd new data to data/ or inst/extdata/ and document it.\nUpdate vignettes or README files if needed.\nAdd or update roxygen2 documentation in .R files.\n\n\n\n2. Update Package Documentation\nAfter editing any .R file or adding roxygen tags:\n\n# devtools::document()\n\nUpdates your NAMESPACE (for @export, @importFrom, etc.). Regenerates .Rd files in man/.\n\n\n3. Update Version Number (Optional)\nIn your DESCRIPTION file, the version might be written as Version: 0.1.0. If you’re making a user-visible change, bump the version. Use semantic versioning:\n\n\n\nType\nExample Version Bump\n\n\n\n\nBug fix\n0.1.0 → 0.1.1\n\n\nNew feature\n0.1.1 → 0.2.0\n\n\nMajor redesign\n0.2.1 → 1.0.0\n\n\n\nOr use:\n\n# usethis::use_version(\"minor\")  # or \"patch\", \"major\"\n\n\n\n4. Test Your Package\nRun a full check:\n\n# devtools::check()\n\nLook for errors, warnings, or notes — especially related to new functions, dependencies, or documentation.\n\n\n5. Reinstall Locally\nIf you want to use the updated version in your own R session:\n\n# devtools::install()\n\nOr with cleaning to remove old build artifacts:\n\n# devtools::install(clean = TRUE)\n\n\n\n6. Commit and Push\n\n\n7. Rebuild Vignettes (Optional)\nIf your changes affect a vignette:\n\n# devtools::build_vignettes()\n\n\n\nBonus: Keep a NEWS file\nTo track your changes over time, add a NEWS.md file:\n\n# usethis::use_news_md()\n\nThen update it with each change, e.g.:\n\n# markdown\n# Copy\n# Edit\n# # pvsero 0.2.0\n# \n# * Added `plot_plate_mfi()` function for quick QC plots.\n# * Updated vignette to include new workflow.\n# * Fixed bug in `normalize_rau()`.",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "R Package Development"
    ]
  },
  {
    "objectID": "Code_Book/04_Quarto.html#callout-note",
    "href": "Code_Book/04_Quarto.html#callout-note",
    "title": "04_Quarto",
    "section": "Callout Note",
    "text": "Callout Note",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "04_Quarto"
    ]
  },
  {
    "objectID": "Code_Book/04_Quarto.html#column-margin",
    "href": "Code_Book/04_Quarto.html#column-margin",
    "title": "04_Quarto",
    "section": "Column Margin",
    "text": "Column Margin",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "04_Quarto"
    ]
  },
  {
    "objectID": "Code_Book/04_Quarto.html#two-columns",
    "href": "Code_Book/04_Quarto.html#two-columns",
    "title": "04_Quarto",
    "section": "Two Columns",
    "text": "Two Columns\n\n# ::: {.grid}\n# \n# ::: {.g-col-6}\n# \n# **Column 1**\n# \n# :::\n#   \n# ::: {.g-col-6}\n# \n# **Column 2**\n# \n# :::\n#   \n# :::",
    "crumbs": [
      "Home",
      "Code: The Basics",
      "04_Quarto"
    ]
  }
]